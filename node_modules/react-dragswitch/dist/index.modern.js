import React, { useState, useEffect, useRef } from 'react';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var styles = {"switch":"_2-ZbH","switchBg":"_3QxTi","switchInput":"_3maKS","switchHandle":"_ju7HT","isChecked":"_3YMB2"};

var ToggleSwitch = function ToggleSwitch(_ref) {
  var className = _ref.className,
      checked = _ref.checked,
      onChange = _ref.onChange,
      onColor = _ref.onColor,
      offColor = _ref.offColor,
      handleColor = _ref.handleColor,
      focusShadow = _ref.focusShadow,
      disabled = _ref.disabled,
      labelProps = _objectWithoutPropertiesLoose(_ref, ["className", "checked", "onChange", "onColor", "offColor", "handleColor", "focusShadow", "disabled"]);

  var _useState = useState(false),
      hasOutline = _useState[0],
      setOutline = _useState[1];

  var _useState2 = useState(0),
      lastMouseUpTime = _useState2[0],
      setMouseUpTime = _useState2[1];

  var handleChange = function handleChange() {
    onChange(!checked);
  };

  var onMouseUp = function onMouseUp() {
    setMouseUpTime(Date.now());
  };

  useEffect(function () {
    window.addEventListener('mouseup', onMouseUp);
    return function () {
      window.removeEventListener('mouseup', onMouseUp);
    };
  }, []);
  return React.createElement("label", Object.assign({
    style: {
      cursor: disabled ? 'not-allowed' : 'pointer',
      filter: disabled ? 'brightness(0.9)' : 'unset'
    }
  }, labelProps, {
    className: styles["switch"] + " " + (className || '')
  }), React.createElement("div", {
    className: styles.switchBg + " " + (checked ? styles.isChecked : ''),
    style: {
      backgroundColor: checked ? onColor || '#66bb6a' : offColor || '#cccccc'
    }
  }), React.createElement("div", {
    id: 'dragswitch-handle',
    className: styles.switchHandle + " " + (checked ? styles.isChecked : ''),
    style: {
      WebkitTransition: 'transform .2s',
      MozTransition: 'transform .2s',
      transition: 'transform .2s',
      boxShadow: hasOutline ? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px' : undefined,
      backgroundColor: handleColor || '#ffffff'
    }
  }), React.createElement("input", {
    role: 'switch',
    "aria-checked": checked,
    type: 'checkbox',
    defaultChecked: checked,
    onChange: handleChange,
    onFocus: function onFocus() {
      if (Date.now() - lastMouseUpTime > 25) setOutline(true);
    },
    onBlur: function onBlur() {
      setOutline(false);
    },
    disabled: disabled,
    className: styles.switchInput
  }));
};

var DragSwitch = function DragSwitch(_ref) {
  var className = _ref.className,
      checked = _ref.checked,
      onChange = _ref.onChange,
      onColor = _ref.onColor,
      offColor = _ref.offColor,
      handleColor = _ref.handleColor,
      focusShadow = _ref.focusShadow,
      disabled = _ref.disabled,
      labelProps = _objectWithoutPropertiesLoose(_ref, ["className", "checked", "onChange", "onColor", "offColor", "handleColor", "focusShadow", "disabled"]);

  var switchRef = useRef(null);

  var _useState = useState(checked ? 20 : 0),
      Xpos = _useState[0],
      setPos = _useState[1];

  var _useState2 = useState(false),
      isMouseDown = _useState2[0],
      setMouseDown = _useState2[1];

  var _useState3 = useState(0),
      lastMouseUpTime = _useState3[0],
      setMouseUpTime = _useState3[1];

  var _useState4 = useState(false),
      hasOutline = _useState4[0],
      setOutline = _useState4[1];

  var _useState5 = useState(false),
      dragging = _useState5[0],
      setDragging = _useState5[1];

  var _useState6 = useState(0),
      dragEnd = _useState6[0],
      setDragEnd = _useState6[1];

  var handleChange = function handleChange() {
    if (Date.now() - dragEnd > 25) {
      handleChecked(!checked);
    }
  };

  var handleChecked = function handleChecked(newChecked) {
    if (newChecked) {
      setPos(20);
    } else {
      setPos(0);
    }

    if (newChecked !== checked) onChange(newChecked);
  };

  var startDrag = function startDrag(e) {
    e.preventDefault();
    setMouseDown(true);
    setOutline(true);
  };

  var onMouseUp = function onMouseUp(e) {
    setMouseDown(false);
    setOutline(false);
    setMouseUpTime(Date.now());

    if (switchRef.current && dragging) {
      var mouseRelativePos = e.clientX - switchRef.current.getBoundingClientRect().left;
      setDragEnd(Date.now());
      setDragging(false);

      if (mouseRelativePos >= 20) {
        handleChecked(true);
      } else {
        handleChecked(false);
      }
    }
  };

  var onMouseMove = function onMouseMove(e) {
    if (isMouseDown && !dragging) {
      setDragging(true);
    }

    if (switchRef.current && dragging) {
      var halfHandle = 8;
      var newPos = e.clientX - switchRef.current.getBoundingClientRect().left - halfHandle;

      if (newPos < 0) {
        setPos(0);
      } else if (newPos > 20) {
        setPos(20);
      } else {
        setPos(newPos);
      }
    }
  };

  useEffect(function () {
    window.addEventListener('mousemove', onMouseMove);
    return function () {
      window.removeEventListener('mousemove', onMouseMove);
    };
  }, [dragging, isMouseDown]);
  useEffect(function () {
    window.addEventListener('mouseup', onMouseUp);
    return function () {
      window.removeEventListener('mouseup', onMouseUp);
    };
  }, [dragging]);
  return React.createElement("label", Object.assign({
    style: {
      cursor: disabled ? 'not-allowed' : 'pointer',
      filter: disabled ? 'brightness(0.9)' : 'unset'
    }
  }, labelProps, {
    className: styles["switch"] + " " + (className || ''),
    ref: switchRef,
    onMouseDown: disabled ? undefined : startDrag
  }), React.createElement("div", {
    className: styles.switchBg + " " + (checked ? styles.isChecked : ''),
    style: {
      backgroundColor: checked ? onColor || '#66bb6a' : offColor || '#cccccc'
    }
  }), React.createElement("div", {
    id: 'dragswitch-handle',
    className: styles.switchHandle + " " + (checked ? styles.isChecked : ''),
    style: {
      transform: "translateX(" + Xpos + "px)",
      WebkitTransition: dragging ? undefined : 'transform .2s',
      MozTransition: dragging ? undefined : 'transform .2s',
      transition: dragging ? undefined : 'transform .2s',
      boxShadow: hasOutline ? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px' : undefined,
      backgroundColor: handleColor || '#ffffff'
    },
    onClick: function onClick(e) {
      e.preventDefault();
      setOutline(false);
      if (!disabled) handleChange();
    }
  }), React.createElement("input", {
    role: 'switch',
    "aria-checked": checked,
    type: 'checkbox',
    defaultChecked: checked,
    onChange: handleChange,
    onFocus: function onFocus() {
      if (Date.now() - lastMouseUpTime > 25) setOutline(true);
    },
    onBlur: function onBlur() {
      setOutline(false);
    },
    disabled: disabled,
    className: styles.switchInput
  }));
};

export { DragSwitch, ToggleSwitch };
//# sourceMappingURL=index.modern.js.map
